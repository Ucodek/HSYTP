"""Initial migration

Revision ID: a43dbaa197ea
Revises: 
Create Date: 2025-05-06 13:04:27.587694

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "a43dbaa197ea"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "instruments",
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "STOCK",
                "ETF",
                "CRYPTO",
                "INDEX",
                "FOREX",
                "OTHER",
                name="instrumenttype",
            ),
            nullable=False,
        ),
        sa.Column("country", sa.String(length=2), nullable=True),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("sector", sa.String(length=100), nullable=True),
        sa.Column("industry", sa.String(length=100), nullable=True),
        sa.Column(
            "market",
            sa.Enum(
                "NASDAQ", "NYSE", "BIST", "CRYPTO", "FOREX", "OTHER", name="markettype"
            ),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_instruments")),
    )
    op.create_index(
        op.f("ix_instruments_country"), "instruments", ["country"], unique=False
    )
    op.create_index(op.f("ix_instruments_id"), "instruments", ["id"], unique=False)
    op.create_index(
        op.f("ix_instruments_market"), "instruments", ["market"], unique=False
    )
    op.create_index(
        op.f("ix_instruments_symbol"), "instruments", ["symbol"], unique=True
    )
    op.create_index(op.f("ix_instruments_type"), "instruments", ["type"], unique=False)
    op.create_table(
        "users",
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("username", sa.String(length=100), nullable=False),
        sa.Column("hashed_password", sa.String(length=255), nullable=False),
        sa.Column("full_name", sa.String(length=255), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("is_locked", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "instrument_price_history",
        sa.Column("instrument_id", sa.Integer(), nullable=False),
        sa.Column("price", sa.Numeric(precision=18, scale=6), nullable=False),
        sa.Column("change", sa.Numeric(precision=18, scale=6), nullable=True),
        sa.Column("change_percent", sa.Numeric(precision=10, scale=4), nullable=True),
        sa.Column("volume", sa.Numeric(precision=20, scale=0), nullable=True),
        sa.Column("day_high", sa.Numeric(precision=18, scale=6), nullable=True),
        sa.Column("day_low", sa.Numeric(precision=18, scale=6), nullable=True),
        sa.Column("w52_high", sa.Numeric(precision=18, scale=6), nullable=True),
        sa.Column("w52_low", sa.Numeric(precision=18, scale=6), nullable=True),
        sa.Column("previous_close", sa.Numeric(precision=18, scale=6), nullable=True),
        sa.Column(
            "market_timestamp",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Datetime with timezone when price was recorded in the market",
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instruments.id"],
            name=op.f("fk_instrument_price_history_instrument_id_instruments"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "instrument_id",
            "market_timestamp",
            name=op.f("pk_instrument_price_history"),
        ),
        comment="Time-series price data for instruments",
    )
    op.create_index(
        "idx_price_history_ts_instrument",
        "instrument_price_history",
        ["market_timestamp", "instrument_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_instrument_price_history_instrument_id"),
        "instrument_price_history",
        ["instrument_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_instrument_price_history_market_timestamp"),
        "instrument_price_history",
        ["market_timestamp"],
        unique=False,
    )
    op.create_table(
        "tokens",
        sa.Column("token_id", sa.String(), nullable=False),
        sa.Column(
            "token_type", sa.Enum("ACCESS", "REFRESH", name="tokentype"), nullable=False
        ),
        sa.Column("revoked", sa.Boolean(), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_tokens_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tokens")),
    )
    op.create_index(op.f("ix_tokens_id"), "tokens", ["id"], unique=False)
    op.create_index(op.f("ix_tokens_token_id"), "tokens", ["token_id"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_tokens_token_id"), table_name="tokens")
    op.drop_index(op.f("ix_tokens_id"), table_name="tokens")
    op.drop_table("tokens")
    op.drop_index(
        op.f("ix_instrument_price_history_market_timestamp"),
        table_name="instrument_price_history",
    )
    op.drop_index(
        op.f("ix_instrument_price_history_instrument_id"),
        table_name="instrument_price_history",
    )
    op.drop_index(
        "idx_price_history_ts_instrument", table_name="instrument_price_history"
    )
    op.drop_table("instrument_price_history")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_instruments_type"), table_name="instruments")
    op.drop_index(op.f("ix_instruments_symbol"), table_name="instruments")
    op.drop_index(op.f("ix_instruments_market"), table_name="instruments")
    op.drop_index(op.f("ix_instruments_id"), table_name="instruments")
    op.drop_index(op.f("ix_instruments_country"), table_name="instruments")
    op.drop_table("instruments")
    # ### end Alembic commands ###
